import java.io.BufferedReader;
import java.net.Socket;
import java.io.BufferedWriter;
import java.util.ArrayList;
import java.io.*;

//this class implements the runnable interface

public class ChatClientHandler implements Runnable {
    //this array list holds the client handler object-- keeps track of the clients
    public static ArrayList<ChatClientHandler> clientHandlers = new ArrayList<>();

    //below socket is passed on from the server class to establish a connection between client and the server
    private Socket socket;
    private BufferedReader bufferedReader;          //sending data
    private BufferedWriter bufferedWriter;          //writing data
    private String clientUsername;                  //name of client

    public ChatClientHandler(Socket socket) {
        try{
            this.socket = socket;
            this.bufferedWriter = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
            this.bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            this.clientUsername = bufferedReader.readLine();
            clientHandlers.add(this);
            chatBroadcastMessage("SERVER: "+clientUsername+" has joined the chat!");

        } catch (IOException e) {
            shutdownAll(socket, bufferedReader, bufferedWriter);
        }
    }

    // everything here is run on a separate thread -- listens for messages
    @Override
    public void run() {
        // doesn't wait for messages runs whatever messages comes through
        String messageFromClient;

        while (socket.isConnected()) {
            try{
                messageFromClient =bufferedReader.readLine();
                chatBroadcastMessage(messageFromClient);
            } catch (IOException e){
                shutdownAll(socket , bufferedReader, bufferedWriter);
                break;
            }
        }
    }

    public void chatBroadcastMessage(String messageToSend) {
        for (ChatClientHandler clientHandler : clientHandlers){
            try{
                // checks for commonality and sends a message to that particular client
                if (!clientHandler.clientUsername.equals(clientUsername)) {
                    clientHandler.bufferedWriter.write(messageToSend);
                    clientHandler.bufferedWriter.newLine();
                    clientHandler.bufferedWriter.flush();
                }
            } catch (IOException e) {
                shutdownAll(socket, bufferedReader, bufferedWriter);
            }
        }
    }

    //displays if a client has left the chat
    public void chatRemoveClientHandler() {
        clientHandlers.remove( this);
        chatBroadcastMessage( "SERVER "+clientUsername+" has left the chat!");
    }

    //closes down the connections and streams
    public void shutdownAll(Socket socket, BufferedReader bufferedReader, BufferedWriter bufferedWriter) {
        chatRemoveClientHandler();
        try {
            if (bufferedReader != null) {
                bufferedReader.close();
            }
            if (bufferedWriter != null) {
                bufferedWriter.close();
            }
            if (socket !=null) {
                socket.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
